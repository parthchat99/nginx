events {}

######################
# (1) Array Directive
######################
# Can be specified multiple times without overriding a previous setting
# Gets inherited by all child contexts
# Child context can override inheritance by re-declaring directive
access_log /var/log/nginx/access.log;
access_log /var/log/nginx/custom.log.gz custom_format;

http {
	
	include mime.types;

	# server{
	# 	listen 80;
	# 	server_name 172.17.0.1;

	# 	root /../../../home/parth/sites/demo;

		# A. Location blocks based on there priority

		# 1. Exact match
		# location = /greet {
		# 	return 200 "Hello form NGINX '/greet' location. = Exact Match";
		# }
		
		# 2. Preferential Prefix match
		# location ^~ /Greet2 {
		# 	return 200 "Hello form NGINX '/greet' location.";
		# }

		# 3. REGEX match
		# location ~ /greet[0-9] {
		# 	return 200 "Hello form NGINX '/greet' location. = REGEX Match";
		# }

		# 4. REGEX match case insensitive
		# location ~* /greet[0-9] {
		# 	return 200 "Hello form NGINX '/greet' location. = REGEX Match case insensitive";
		# }

		# 5. Prefix match
		# location /greet {
		# 	return 200 "Hello form NGINX '/greet' location.";
		# }

		# B. Check static API key
		# if ( $arg_apikey != 1234 ){
		# 	return 401 "Incorrect API key";
		# }

		# C. Checking inbuilt variables
		# location /inspect {
		# 	return 200 "$host\n$uri\n$args";
		# }

		# D. Make a variable
		# set $weekend 'No';

		# E. Check if weekend
		# if ( $date_local ~ 'Saturday|Sunday' ) {
		# 	set $weekend 'Yes';
		# }

		# location /is_weekend {
		# 	return 200 $weekend;
		# }

		# F. Reroute
		# location /logo {
		# 	return 307 /thumb.png;
		# }

		# G. Rewrite
		# rewrite ^/user/(\w+) /greet/$1 last;
		# rewrite ^/greet/john /thumb.png;

		# H. This will first check thumb.png and if exist then will show that. Otherwise will redirect tot /greet
		# try_files /thumb.png /greet;
		# try_files /cat.png /greet;

		# I. This will show pages according to the url path of the files
		# try_files $uri /cat.png /greet;

		# J. Will take to 404
		# try_files $uri /cat.png /greet /friendly_404;

		# location /friendly_404 {
		# 	return 404 "Sorry, That file can't be found";
		# }

		# location /greet {
		# 	return 200 "Hello User";
		# }

		# K. Named Locations - No evaluation has to happened
		# try_files $uri /cat.png /greet @friendly_404;

		# location @friendly_404 {
		# 	return 404 "Sorry, That file can't be found";
		# }

		# location /greet {
		# 	return 200 "Hello User";
		# }

		# location = /greet/john {
		# 	return 200 "Hello John";
		# }


		# L. Create a log file
		# location /secure {
		# 	# To particular log file
		# 	access_log /var/log/nginx/secure.access.log;
		# 	# To global log file
		# 	access_log /var/log/nginx/access.log;
		# 	# To disable access log
		# 	access.log off;
		# 	return 200 'Welcome to Secure Area';
		# }
	# }
	
	# Include statement - non directive
	
	server {
		listen 80;
		server_name site1.com;

		# Inherits access_log from parent context (1)
	}

	server {
		listen 80;
		server_name site2.com;

		#########################
		# (2) Standard Directive
		#########################
		# Can only be declared once. A second declaration overrides the first
		# Gets inherited by all child contexts
		# Child context can override inheritance by re-declaring directive
		root /sites/site2;

		# Completely overrides inheritance from (1)
		access_log off;

		location /images {

		# Uses root directive inherited from (2)
		try_files $uri /stock.png;
		}

		location /secret {
		#######################
		# (3) Action Directive
		#######################
		# Invokes an action such as a rewrite or redirect
		# Inheritance does not apply as the request is either stopped (redirect/response) or re-evaluated (rewrite)
		return 403 "You do not have permission to view this.";
		}
	}
}
